# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'add_user.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QLabel, QPushButton, QVBoxLayout, QWidget, QFileDialog, QGridLayout, QMainWindow
from PyQt5.QtGui import QPixmap
from PyQt5.QtGui import QCursor
# import sys
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
# from bs4 import BeautifulSoup
# import requests
# from PIL import Image
# from io import BytesIO
import os
# from zipfile import ZipFile
from os.path import basename
from PyQt5 import QtCore, QtGui, QtWidgets
import jdatetime
import json
import sys

data = {}
data = []

class PhotoLabel(QLabel):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setAlignment(Qt.AlignCenter)
        self.setStyleSheet('''
        QLabel {
            border: 4px dashed #aaa;
        }''')

    def setPixmap(self, *args, **kwargs):
        super().setPixmap(*args, **kwargs)
        self.setStyleSheet('''
        QLabel {
            border: none;
        }''')


class Template(QWidget):

    def __init__(self):
        super().__init__()
        self.photo = PhotoLabel()
        btn = QPushButton('Browse')
        btn.clicked.connect(self.open_image)
        btn2 = QPushButton('Ok')
        btn2.clicked.connect(self.close)
        grid = QGridLayout(self)
        grid.addWidget(btn, 1, 0)
        grid.addWidget(btn2, 3, 0)
        grid.addWidget(self.photo, 2, 0)
        self.setAcceptDrops(True)
        self.resize(300, 200)


    def open_image(self, filename=None):
        if not filename:
            filename, _ = QFileDialog.getOpenFileName(self, 'Select Photo', QDir.currentPath(), 'Images (*.png *.jpg)')
            if not filename:
                return
        self.photo.setPixmap(QPixmap(filename))
        # print(filename)
        return(filename)


class Ui_MainWindow(QtWidgets.QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(803, 565)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 420, 411, 81))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setStyleSheet(
        '''*{
            color: 'black';
            font-family: 'Arial';
            font-size: 22px;
            border-radius: 12px;
            font-weight: 900;
            background: transparent;
            background-color: rgba(100, 100, 100, 0.4);

        }
        *:hover{
            color: 'black';
            font-family: 'Arial';
            font-size: 22px;
            font-weight: 900;
            border-radius: 12px;
            background: transparent;
            background-color: rgba(100, 100, 100, 0.9);
        }''')
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 80, 401, 291))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_4 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.label_4.setStyleSheet(
        '''*{
            color: 'black';
            font-family: 'Arial';
            font-size: 22px;
            border-radius: 12px;
            font-weight: 900;
            background: transparent;
            background-color: rgba(100, 100, 100, 0.2);

        }''')
        self.verticalLayout.addWidget(self.label_4)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(440, 80, 331, 291))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_5 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.label_5.setObjectName("label_5")
        self.label_5.setStyleSheet(
        '''*{
            color: 'black';
            font-family: 'Arial';
            font-size: 22px;
            border-radius: 12px;
            font-weight: 900;
            background: transparent;
            background-color: rgba(100, 100, 100, 0.2);

        }''')
        self.verticalLayout_2.addWidget(self.label_5)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(550, 20, 91, 41))
        self.label.setObjectName("label")
        self.label.setStyleSheet(
        '''*{
            color: 'black';
            font-family: 'Arial';
            font-size: 22px;
            border-radius: 12px;
            font-weight: 200;
            padding-right:14px;
            background: transparent;
            background-color: rgba(100, 100, 100, 0.4);

        }''')
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(166, 20, 91, 41))
        self.label_2.setObjectName("label_2")
        self.label_2.setStyleSheet(
        '''*{
            color: 'black';
            font-family: 'Arial';
            font-size: 22px;
            border-radius: 12px;
            font-weight: 200;
            padding-right:8px;
            background: transparent;
            background-color: rgba(100, 100, 100, 0.4);

        }''')
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(450, 420, 301, 81))
        self.label_3.setObjectName("label_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 803, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "افزودن دانش آموز"))
        self.pushButton.setText(_translate("MainWindow", "اضافه کردن"))
        self.pushButton.clicked.connect(self.takeinputs)
        self.label_4.setText(_translate("MainWindow", ""))
        self.label_5.setText(_translate("MainWindow", ""))
        self.label.setText(_translate("MainWindow", "تصویر"))
        self.label_2.setText(_translate("MainWindow", "اطلااعات"))
        self.label_3.setText(_translate("MainWindow", "جهت افزودن اطلاعات بر روی دکمه‌ی \"اضافه کردن\" کلیک کنید"))

# function to take inputs
    def takeinputs(self):
        try:
            d1=True
            while d1:
                name, done1 = QtWidgets.QInputDialog.getText(
                    self, 'Input Dialog', 'نام خود را وارد کنید:')
                if done1:
                    pass
                else:self.quit()
                try:
                    if name:
                        if int(name):
                            QMessageBox.information(self," ","نامل باید  شامل حروف باشد")
                            pass
                        else:
                            d1=False
                    else:
                        QMessageBox.information(self," ","نامل باید  شامل حروف باشد")
                except:
                    d1=False
                # print(type(name))
                # if type(name)==str:
                #     pass
                # else:
                #     QMessageBox.information(self," "," اطلاعات نادرست")
                # else:self.quit()
                # if not name :
                #     self.quit()
                # else:pass
            d2 = True
            while d2:
                family, done2 = QtWidgets.QInputDialog.getText(
                self, 'Input Dialog', 'نام خانوادگی خود را وارد کنید:')
                if done2:
                    # self.quit()
                    pass
                else:
                # if not family :
                    self.quit()
                try:
                    if family:
                        if int(family):
                            QMessageBox.information(self," ","نام خانوادگی باید  شامل حروف باشد")
                            pass
                        else:
                            d2=False
                    QMessageBox.information(self," ","نام خانوادگی باید  شامل حروف باشد")
                except:
                    d2=False

            # else:pass
            d3 =True
            while d3:
                tell, done3 = QtWidgets.QInputDialog.getText(
                    self, 'Input telephone', 'شماره تلفن خود را وارد کنید:')

                if done3:
                    pass
                else:self.quit()
                try:
                    if tell:
                        if int(tell):
                            d3 = False
                            pass
                        else:
                            QMessageBox.information(self," ","شماره تلفن باید  شامل  عدد  باشد")
                    else:
                        QMessageBox.information(self," ","شماره تلفن باید  شامل  عدد  باشد")
                except:
                    QMessageBox.information(self," ","شماره تلفن باید  شامل  عدد  باشد")
            d4 = True
            while d4:
                try:
                    with open('data.json') as json_file:
                        data = json.load(json_file)
                except:
                    data=[]
                    with open('data.json', 'w+') as outfile:
                        json.dump(data, outfile)
                    data=[]
                    with open('data.json', 'w+') as outfile:
                        json.dump(data, outfile)

                code, done7 = QtWidgets.QInputDialog.getText(
                    self, 'Input telephone', 'کد ملی خود را وارد کنید :')
                if done7:
                    pass
                else:self.quit()
                try:
                    if code:
                        if int(code):
                            print("dd")
                            true = 0
                            # true2 = 0
                            for tRue in data:
                                if tRue['code']==code and tRue['name']==name and tRue['family']==family:
                                    true = 1
                                    QMessageBox.information(self," ",f"این شخص قبلا ثبت شده است.\n{tRue['name']},{tRue['family']},{tRue['code']}")
                                else:
                                    # d5 = False
                                    pass

                            if not true:
                                d4=False
                        else:
                            QMessageBox.information(self," ","باید  شامل عدد باشد")
                    else:
                        QMessageBox.information(self," ","باید  شامل عدد باشد")
                except:
                        QMessageBox.information(self," ","باید  شامل عدد باشد")
            # langs =['C', 'c++', 'Java', 'Python', 'Javascript']
            d5 = True
            while d5:



                password , done4 = QtWidgets.QInputDialog.getText(
                    self, 'put youre card', 'کارت را در معرض دستگاه قرار دهید:')
                if done4:
                    pass
                else:self.quit()
                try:
                    if password:
                        if int(password):
                            true = 0
                            true2 = 0
                            for tRue in data:
                                if tRue['ID']==password:
                                    true = 1
                                    QMessageBox.information(self," ","این کارت تکراری است.")
                                else:
                                    # d5 = False
                                    pass

                            if not true:
                                d5=False
                            # pass
                        else:
                            QMessageBox.information(self," ","باید  شامل عدد باشد")
                    else:QMessageBox.information(self," ","باید  شامل عدد باشد")
                except:
                        QMessageBox.information(self," ","باید  شامل عدد باشد")
            # classs , done5 = QtWidgets.QInputDialog.getText(
                # self, 'put youre card', 'نام آموزگار را وارد کنید')
            d6 =True
            d7 =True
            while d6:
                classs , done6 = QtWidgets.QInputDialog.getText(
                    self, 'put youre card','شماره ی کلاس دانش اموز را وارد کنید :')
                if done6:
                    pass
                else:self.quit()
                try:
                    if classs:
                        if int(classs):
                            d6 = False
                            d7 = False
                            pass
                        else:
                            QMessageBox.information(self," ","باید  شامل عدد باشد")
                    else:d6 = False
                        # QMessageBox.information(self," ","باید  شامل عدد باشد")
                except:
                    QMessageBox.information(self," ","باید  شامل عدد باشد")
            personalcode = "10"
            while d7:
                personalcode , done70 = QtWidgets.QInputDialog.getText(
                    self, 'put youre card','کد پرسنلی یا شماره ی کلاس خود را وارد کنید')
                if done70:
                    pass
                else:self.quit()
                try:
                    if personalcode:
                        if int(personalcode):
                            true = 0
                            # true2 = 0
                            for tRue in data:
                                if tRue['personalcode']==personalcode:
                                    true = 1
                                    QMessageBox.information(self," ",f"ببخشید آقای {tRue['family']} گویا شخصی میخواهد جای شمارا بگیرد.")
                                else:
                                    # d5 = False
                                    pass

                            if not true:
                                d7=False
                            # pass
                        else:
                            QMessageBox.information(self," ","باید  شامل عدد باشد")
                    else:d7=False
                        # QMessageBox.information(self," ","باید  شامل عدد باشد") 
                except:
                    QMessageBox.information(self," ","باید  شامل عدد باشد")
            gui = Template()
            p = gui.open_image()
            # up is to take image

            if done1 and done2 and done4 :
                try:
                    with open('data.json') as json_file:
                        data = json.load(json_file)
                except:
                    data=[]
                    with open('data.json', 'w+') as outfile:
                        json.dump(data, outfile)
                true = 0
                true2 = 0
                for tRue in data:
                    if tRue['ID']==password:
                        true = 1
                        error = "کارت تکراری است."
                    else:
                        pass
                    if tRue['name']==name and tRue['family']==family and tRue['code']==code:
                        true2 = 1
                        error = "شخص تکراری است."
                    else:
                        pass
                if true==0 and true2==0:
                    time = jdatetime.datetime.now()
                    data.append({
                                'name':name,
                                'family':family,
                                'tell':tell,
                                'ID':password,
                                'code':code,
                                'day':time.day,
                                'month': time.month,
                                'year': time.year,
                                'hour':time.hour,
                                'filename':p,
                                'class':classs,
                                'personalcode':personalcode
                                        })
                    if name != "" and family != "":
                        from pathlib import Path
                        my_file = Path(f'{p}')
                        if my_file.is_file():
                            self.pixmap = QPixmap(p)
                            # print(data[student]['filename'])
                            self.pixmap_resized = self.pixmap.scaled(320, 405, QtCore.Qt.KeepAspectRatio)
                            self.label_5.setPixmap(self.pixmap_resized)
                        # self.pixmap = QPixmap(p)
                        # self.pixmap_resized = self.pixmap.scaled(320, 405, QtCore.Qt.KeepAspectRatio)
                        # self.label_5.setPixmap(self.pixmap_resized)
                        else:self.label_5.setText("     تصویر موجود نیست")
                        self.label_5.setStyleSheet(
                                                '''*{
                                                    color: 'black';
                                                    font-family: 'Arial';
                                                    font-size: 22px;
                                                    border-radius: 12px;
                                                    font-weight: 200;
                                                    background: transparent;
                                                    background-color: rgba(100, 100, 100, 0.4);

                                                }''')
                        self.label_4.setText('نام و نام خانوادگی :'
                                        +str(name)+' '+str(family)+'\n'+'تلفن: '
                                        +str(tell)+'\n کد ملی: '+str(code)+'\n کد عبور: '+str(password)+'\n'+'کلاس: '+str(classs))
                        self.label_4.setStyleSheet(
                                                '''*{
                                                    color: 'black';
                                                    font-family: 'Arial';
                                                    font-size: 22px;
                                                    border-radius: 12px;
                                                    font-weight: 200;
                                                    padding-right:8px;
                                                    background: transparent;
                                                    background-color: rgba(0, 250, 0, 0.5);

                                                }''')
                    else:
                        self.label_4.setText(error)
                        self.label_4.setStyleSheet(
                                                '''*{
                                                    color: 'black';
                                                    font-family: 'Arial';
                                                    font-size: 22px;
                                                    border-radius: 12px;
                                                    font-weight: 200;
                                                    padding-right:8px;
                                                    background: transparent;
                                                    background-color: rgba(250, 0, 0, 0.5);

                                            }''')
                    # Hide the pushbutton after inputs provided by the use.
                    # self.pushButton.hide()  
                else:
                    self.label_4.setText(error)
                    self.label_4.setStyleSheet(
                                                '''*{
                                                    color: 'black';
                                                    font-family: 'Arial';
                                                    font-size: 22px;
                                                    border-radius: 12px;
                                                    font-weight: 200;
                                                    padding-right:8px;
                                                    background: transparent;
                                                    background-color: rgba(250, 0, 0, 0.5);

                                                }''')
            else:
                with open('data.json') as json_file:
                    data = json.load(json_file)
            with open('data.json', 'w+') as outfile:
                json.dump(data, outfile)
        except:
            pass
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    sys.exit(app.exec_())